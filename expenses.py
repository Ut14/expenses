# -*- coding: utf-8 -*-
"""expenses

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_5nbgMjN4Yhbnr7GqdFxQS2Jpy6ezIr3
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV

data=pd.read_csv("expense.csv")

data.head()

# prompt: Using dataframe data: distribute iin X and y

# Assuming you want to predict "Housing (Your Spending)" based on other columns.
# Select features (X) and target variable (y)
X = data.drop(columns=[' Housing (Your Spending)', 'Category'])
y = data[' Housing (Your Spending)']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 5, 10],
    'min_samples_split': [2, 5, 10]
}

rf_model = RandomForestRegressor(random_state=42)

grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5)

grid_search.fit(X_train, y_train)

# Get the best parameters and model
best_params = grid_search.best_params_
best_model = grid_search.best_estimator_

# Make predictions using the best model
y_pred = best_model.predict(X_test)
# Evaluate the best model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Best Parameters: {best_params}")
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

